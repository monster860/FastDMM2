async function hash_text(e){const a=(new TextEncoder).encode(e),t=await crypto.subtle.digest("SHA-1",a);return Array.prototype.map.call(new Uint8Array(t),(e=>("00"+e.toString(16)).slice(-2))).join("")}async function install_initial_cache(){let e=caches.open("current"),a=await fetch("appfiles.json"),t=a.clone(),c=new Map(await a.json()),n=await e;await Promise.all([n.addAll([...c.keys()]),n.put("appfiles.json",t),caches.delete("staging")])}let update_cache_promise=null;async function update_cache(e,a,t){let c=await caches.open("staging");try{let n=[c.put("appfiles.json",t.clone())];for(let[t,i]of a)i!=e.get(t)&&n.push(fetch(t,{cache:"no-cache"}).then((e=>c.put(t,e))));await Promise.all(n),console.log("App updated.");for(let e of await clients.matchAll({type:"window"}))e.postMessage("new-update")}catch(e){console.error("Failed to update app."),console.error(e),await caches.delete("staging")}}async function from_cache(e){let a=e.request,t=new URL(a.url),c=await caches.open("current"),n=await(await c.match("appfiles.json")).text(),i=new Map(JSON.parse(n));if("/"==t.pathname||"/index.html"==t.pathname){let e=await caches.has("staging");if(!update_cache_promise)if(e){let e=await caches.open("staging"),a=[];for(let t of await e.matchAll())a.push(c.put(t.url,t));await Promise.all(a),await caches.delete("staging")}else update_cache_promise=(async()=>{try{let e=await fetch("appfiles.json",{cache:"no-cache"}),a=e.clone(),t=await e.text();t!=n&&(console.log("Updating app..."),await update_cache(i,new Map(JSON.parse(t)),a))}finally{update_cache_promise=null}})();let a=await c.match("index.html"),t=await a.text();return new Response(t.replace("out.js","out.js?"+Math.random()),a)}return await c.match(a,{ignoreSearch:!0})||await fetch(a)}self.addEventListener("install",(e=>{console.log("Service worker installing"),e.waitUntil(install_initial_cache())})),self.addEventListener("fetch",(e=>{let a=from_cache(e);e.respondWith(a),e.waitUntil(a.then((()=>update_cache_promise)))})),self.addEventListener("message",(e=>{e.waitUntil((async()=>{"i-exist"==e.data&&await caches.has("staging")&&update_cache_promise&&e.source.postMessage("new-update")}))}));